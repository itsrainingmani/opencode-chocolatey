name: Auto Release opencode Package

on:
  schedule:
    # Check every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      force:
        description: 'Force release even if version matches'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Dry run mode - validate but do not publish'
        required: false
        type: boolean
        default: false

concurrency:
  group: opencode-auto-release
  cancel-in-progress: false

permissions:
  contents: write
  actions: write

jobs:
  auto-release:
    name: Check, Build & Release
    runs-on: windows-latest
    timeout-minutes: 20 # Increased from 15 for potential slow operations

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for potential conflict resolution

      - name: Cache Chocolatey Dependencies
        uses: actions/cache@v4
        with:
          path: |
            C:\ProgramData\chocolatey\bin
            C:\ProgramData\chocolatey\lib\ripgrep
            C:\ProgramData\chocolatey\lib\fzf  
            C:\ProgramData\chocolatey\lib\unzip
            ${{ runner.temp }}/opencode-cache
          key: ${{ runner.os }}-choco-deps-v3
          restore-keys: |
            ${{ runner.os }}-choco-deps-

      - name: Check for new release
        id: check
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get current version
          [xml]$nuspec = Get-Content 'opencode.nuspec'
          $currentVersion = $nuspec.package.metadata.version

          # Get latest release with authentication and retry logic
          $headers = @{ 
            'User-Agent' = 'Chocolatey-Updater'
            'Accept' = 'application/vnd.github.v3+json'
            'Authorization' = "Bearer $env:GITHUB_TOKEN"
          }

          $maxRetries = 3
          $release = $null
          for ($i = 1; $i -le $maxRetries; $i++) {
            try {
              $release = Invoke-RestMethod -Uri 'https://api.github.com/repos/sst/opencode/releases/latest' -Headers $headers -TimeoutSec 30
              break
            } catch {
              # Check for rate limiting
              if ($_.Exception.Response.StatusCode -eq 403) {
                Write-Host "::warning::GitHub API rate limit hit, backing off..."
                Start-Sleep -Seconds (30 * $i)
              }
              if ($i -eq $maxRetries) {
                Write-Host "::error::Failed to fetch latest release after $maxRetries attempts: $_"
                Write-Host "::error::Status Code: $($_.Exception.Response.StatusCode)"
                exit 1
              }
              Write-Host "::warning::API call attempt $i failed, retrying in $((5 * $i)) seconds..."
              Start-Sleep -Seconds (5 * $i)
            }
          }

          $latestVersion = $release.tag_name.TrimStart('v')

          # Check Windows x64 asset
          $asset = $release.assets | Where-Object { $_.name -eq 'opencode-windows-x64.zip' }
          if (-not $asset) {
            Write-Host "::notice::No Windows x64 asset available for $latestVersion"
            "needs_release=false" >> $env:GITHUB_OUTPUT
            exit 0
          }

          # Check if update needed
          $forceRelease = '${{ inputs.force }}' -eq 'true'
          $needsRelease = ($currentVersion -ne $latestVersion) -or $forceRelease

          "needs_release=$($needsRelease.ToString().ToLower())" >> $env:GITHUB_OUTPUT
          "current_version=$currentVersion" >> $env:GITHUB_OUTPUT
          "latest_version=$latestVersion" >> $env:GITHUB_OUTPUT
          "download_url=$($asset.browser_download_url)" >> $env:GITHUB_OUTPUT
          "dry_run=${{ inputs.dry_run }}" >> $env:GITHUB_OUTPUT

          Write-Host "Current: $currentVersion, Latest: $latestVersion, Needs Release: $needsRelease"
          if ('${{ inputs.dry_run }}' -eq 'true') {
            Write-Host "::notice::Running in DRY RUN mode"
          }

      - name: Cache opencode download
        if: steps.check.outputs.needs_release == 'true'
        uses: actions/cache@v4
        id: cache-opencode
        with:
          path: ${{ runner.temp }}/opencode-cache/opencode-${{ steps.check.outputs.latest_version }}.zip
          key: opencode-download-${{ steps.check.outputs.latest_version }}

      - name: Download and update package
        if: steps.check.outputs.needs_release == 'true'
        shell: pwsh
        run: |
          $version = "${{ steps.check.outputs.latest_version }}"
          $downloadUrl = "${{ steps.check.outputs.download_url }}"
          $cacheDir = "${{ runner.temp }}/opencode-cache"
          $cachedFile = "$cacheDir/opencode-$version.zip"
          $tempFile = "$env:TEMP\opencode-$version.zip"

          # Create cache directory if it doesn't exist
          if (-not (Test-Path $cacheDir)) {
            New-Item -ItemType Directory -Path $cacheDir -Force | Out-Null
          }

          # Check if we have a cached version
          if ('${{ steps.cache-opencode.outputs.cache-hit }}' -eq 'true' -and (Test-Path $cachedFile)) {
            Write-Host "✓ Using cached opencode v$version"
            Copy-Item $cachedFile $tempFile
          } else {
            # Function to download with retry
            function Download-WithRetry {
              param($Url, $OutFile, $MaxRetries = 3)
              
              for ($i = 1; $i -le $MaxRetries; $i++) {
                try {
                  if ($i -eq 1) { Write-Host "Downloading opencode v$version..." }
                  Invoke-WebRequest -Uri $Url -OutFile $OutFile -UserAgent 'Chocolatey-Updater' -TimeoutSec 300 2>&1 | Out-Null
                  return $true
                } catch {
                  if ($i -eq $MaxRetries) {
                    throw "Failed to download after $MaxRetries attempts: $_"
                  }
                  Write-Host "::warning::Download attempt $i failed, retrying..."
                  Start-Sleep -Seconds 5
                }
              }
              return $false
            }

            # Download fresh copy
            if (-not (Download-WithRetry -Url $downloadUrl -OutFile $tempFile)) {
              exit 1
            }

            # Cache the downloaded file
            Copy-Item $tempFile $cachedFile
          }

          # Validate downloaded file
          if (-not (Test-Path $tempFile) -or (Get-Item $tempFile).Length -eq 0) {
            throw "Downloaded file is missing or empty"
          }

          # Test if it's a valid zip
          try {
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            $zip = [System.IO.Compression.ZipFile]::OpenRead($tempFile)
            $zip.Dispose()
          } catch {
            throw "Downloaded file is not a valid zip: $_"
          }

          Write-Host "Calculating checksum..."
          $checksum = Get-FileHash -Path $tempFile -Algorithm SHA256 | Select-Object -ExpandProperty Hash
          Remove-Item $tempFile -Force

          # Update nuspec
          [xml]$nuspec = Get-Content 'opencode.nuspec'
          $nuspec.package.metadata.version = $version
          $nuspec.package.metadata.releaseNotes = "https://github.com/sst/opencode/releases/tag/v$version"
          $nuspec.Save('opencode.nuspec')

          # Update install script with more robust regex
          $installScript = Get-Content 'tools\chocolateyinstall.ps1' -Raw
          $installScript = $installScript -replace "checksum64\s*=\s*'([A-F0-9]{64}|PLACEHOLDER_CHECKSUM)'", "checksum64     = '$checksum'"
          Set-Content -Path 'tools\chocolateyinstall.ps1' -Value $installScript -NoNewline

          Write-Host "✓ Package updated to v$version"

      - name: Install Chocolatey and test package
        if: steps.check.outputs.needs_release == 'true'
        shell: pwsh
        run: |
          # Check if Chocolatey is already installed (GitHub runners usually have it)
          if (Get-Command choco -ErrorAction SilentlyContinue) {
            Write-Host "✓ Chocolatey already available"
            choco feature enable -n allowGlobalConfirmation 2>&1 | Out-Null
          } else {
            Write-Host "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')) | Out-Null
            choco feature enable -n allowGlobalConfirmation 2>&1 | Out-Null
            Write-Host "✓ Chocolatey installed"
          }

          # Ensure dependencies are available (check cache first)
          @('ripgrep', 'fzf', 'unzip') | ForEach-Object {
            $libPath = "C:\ProgramData\chocolatey\lib\$_"
            if (Test-Path $libPath) {
              Write-Host "✓ $_ available (cached)"
            } else {
              Write-Host "Installing dependency: $_"
              choco install $_ -y --limit-output 2>&1 | Out-Null
            }
          }

          # Build package quietly
          Write-Host "Building package..."
          choco pack --yes 2>&1 | Out-Null
          if ($LASTEXITCODE -ne 0) { throw "Package build failed" }

          # Store package name for cleanup
          $packageFile = "opencode.${{ steps.check.outputs.latest_version }}.nupkg"
          "package_file=$packageFile" >> $env:GITHUB_OUTPUT
          Write-Host "✓ Package built: $packageFile"

          # Install package quietly
          Write-Host "Testing package installation..."
          choco install opencode -y -s . --force --limit-output 2>&1 | Out-Null
          if ($LASTEXITCODE -ne 0) { throw "Package installation failed" }

          # Verify installation
          $installedVersion = opencode --version 2>&1
          $versionPattern = '(?:v|version\s*)?(\d+\.\d+\.\d+(?:\.\d+)?)'
          if ($installedVersion -match $versionPattern) {
            $extractedVersion = $matches[1]
            if ($extractedVersion -ne '${{ steps.check.outputs.latest_version }}') {
              throw "Version verification failed: expected ${{ steps.check.outputs.latest_version }}, got $extractedVersion"
            }
            Write-Host "✓ Package test passed (v$extractedVersion)"
          } else {
            throw "Could not extract version from output: $installedVersion"
          }

      - name: Check if version already published
        if: steps.check.outputs.needs_release == 'true'
        id: check_published
        shell: pwsh
        run: |
          try {
            $packageInfo = choco search opencode --exact --source=https://community.chocolatey.org/api/v2/ --limit-output 2>&1 | Out-String
            $publishedVersion = ($packageInfo -split '\|')[1]
            
            if ($publishedVersion -eq '${{ steps.check.outputs.latest_version }}') {
              Write-Host "::notice::Version ${{ steps.check.outputs.latest_version }} already published"
              "already_published=true" >> $env:GITHUB_OUTPUT
            } else {
              Write-Host "Version ${{ steps.check.outputs.latest_version }} not yet published"
              "already_published=false" >> $env:GITHUB_OUTPUT
            }
          } catch {
            Write-Host "::warning::Could not check published version, assuming not published"
            "already_published=false" >> $env:GITHUB_OUTPUT
          }

      - name: Commit and tag
        if: steps.check.outputs.needs_release == 'true' && steps.check.outputs.dry_run != 'true'
        shell: pwsh
        run: |
          $version = "${{ steps.check.outputs.latest_version }}"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Check if files actually changed
          if (-not (git diff --quiet HEAD -- opencode.nuspec tools/chocolateyinstall.ps1)) {
            Write-Host "Committing changes..."
            git add opencode.nuspec tools/chocolateyinstall.ps1 2>&1 | Out-Null
            git commit -m "chore: update opencode to v$version" 2>&1 | Out-Null
            
            # Check if tag already exists
            if (git tag -l "v$version") {
              Write-Host "::warning::Tag v$version already exists, deleting..."
              git tag -d "v$version" 2>&1 | Out-Null
              git push origin :refs/tags/"v$version" 2>&1 | Out-Null
            }
            git tag -a "v$version" -m "Release v$version" 2>&1 | Out-Null

            # Push with retry and conflict handling
            $maxRetries = 3
            for ($i = 1; $i -le $maxRetries; $i++) {
              try {
                git push origin main 2>&1 | Out-Null
                git push origin "v$version" 2>&1 | Out-Null
                Write-Host "✓ Changes pushed to repository"
                break
              } catch {
                if ($i -eq $maxRetries) {
                  Write-Host "::error::Failed to push after $maxRetries attempts"
                  exit 1
                }
                Write-Host "::warning::Push failed, retrying..."
                git pull --rebase origin main 2>&1 | Out-Null
                Start-Sleep -Seconds 2
              }
            }
          } else {
            Write-Host "::notice::No changes detected in package files"
          }

      - name: Create GitHub Release
        if: steps.check.outputs.needs_release == 'true' && steps.check.outputs.dry_run != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.check.outputs.latest_version }}
          name: v${{ steps.check.outputs.latest_version }}
          body: |
            **Full Changelog**: https://github.com/itsrainingmani/opencode-chocolatey/compare/v${{ steps.check.outputs.current_version }}...v${{ steps.check.outputs.latest_version }}
          files: opencode.${{ steps.check.outputs.latest_version }}.nupkg
          draft: false
          prerelease: false

      - name: Publish to Chocolatey
        if: steps.check.outputs.needs_release == 'true' && steps.check_published.outputs.already_published == 'false' && steps.check.outputs.dry_run != 'true'
        shell: pwsh
        env:
          CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}
        run: |
          if (-not $env:CHOCO_API_KEY) {
            Write-Host "::error::CHOCO_API_KEY secret not configured"
            exit 1
          }

          $version = "${{ steps.check.outputs.latest_version }}"

          # Push with retry
          Write-Host "Publishing to Chocolatey..."
          $maxRetries = 3
          for ($i = 1; $i -le $maxRetries; $i++) {
            try {
              choco apikey -k $env:CHOCO_API_KEY -s https://push.chocolatey.org/ 2>&1 | Out-Null
              choco push "opencode.$version.nupkg" -s https://push.chocolatey.org/ --timeout=600 2>&1 | Out-Null
              Write-Host "✓ Successfully published opencode v$version to Chocolatey"
              break
            } catch {
              if ($i -eq $maxRetries) {
                throw "Failed to publish to Chocolatey after $maxRetries attempts: $_"
              }
              Write-Host "::warning::Publish attempt $i failed, retrying in 10 seconds..."
              Start-Sleep -Seconds 10
            }
          }

      - name: Cleanup on failure
        if: failure()
        shell: pwsh
        run: |
          # Clean up any built packages
          Get-ChildItem -Path . -Filter "*.nupkg" | Remove-Item -Force -ErrorAction SilentlyContinue
          Write-Host "Cleaned up build artifacts"

      - name: Discord Notification
        if: steps.check.outputs.needs_release == 'true' && steps.check.outputs.dry_run != 'true' && success()
        shell: pwsh
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          $version = "${{ steps.check.outputs.latest_version }}"

          $payload = @{
            content = "🎉 **OpenCode Chocolatey Package Released!**"
            embeds = @(
              @{
                title = "New Release: v$version"
                description = "Successfully published OpenCode v$version to Chocolatey"
                color = 65280
                fields = @(
                  @{
                    name = "Version"
                    value = "v$version"
                    inline = $true
                  }
                  @{
                    name = "Package"
                    value = "[View on Chocolatey](https://community.chocolatey.org/packages/opencode/$version)"
                    inline = $true
                  }
                  @{
                    name = "Changelog"
                    value = "[View Release](https://github.com/sst/opencode/releases/tag/v$version)"
                    inline = $true
                  }
                )
                timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
              }
            )
          } | ConvertTo-Json -Depth 10

          try {
            Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK_URL -Method Post -ContentType "application/json" -Body $payload -TimeoutSec 30 | Out-Null
            Write-Host "✓ Discord notification sent"
          } catch {
            Write-Host "::warning::Failed to send Discord notification: $_"
          }

      - name: Summary and Notifications
        if: always()
        shell: pwsh
        run: |
          $needsRelease = "${{ steps.check.outputs.needs_release }}"
          $currentVersion = "${{ steps.check.outputs.current_version }}"
          $latestVersion = "${{ steps.check.outputs.latest_version }}"
          $dryRun = "${{ steps.check.outputs.dry_run }}"

          $summary = @"
          ## Auto-Release Summary

          - **Current Version:** $currentVersion
          - **Latest Version:** $latestVersion
          - **Needs Release:** $needsRelease
          - **Dry Run:** $dryRun
          - **Status:** ${{ job.status }}
          "@

          if ($needsRelease -eq 'true') {
            if ($dryRun -eq 'true') {
              $summary += "`n`n✅ DRY RUN: Would have released opencode v$latestVersion"
            } elseif ('${{ job.status }}' -eq 'success') {
              $summary += "`n`n✅ Successfully auto-released opencode v$latestVersion"
            } else {
              $summary += "`n`n❌ Failed to auto-release opencode v$latestVersion"
            }
          } else {
            $summary += "`n`nℹ️ No release needed - already at latest version"
          }

          # Write to job summary
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

          # Also output as notice
          if ($needsRelease -eq 'true' -and '${{ job.status }}' -eq 'success' -and $dryRun -ne 'true') {
            Write-Host "::notice::✅ Auto-released opencode v$latestVersion (was v$currentVersion)"
          } elseif ($needsRelease -eq 'true' -and '${{ job.status }}' -ne 'success') {
            Write-Host "::error::❌ Failed to auto-release opencode v$latestVersion"
          } else {
            Write-Host "::notice::ℹ️ No release needed - already at latest version v$currentVersion"
          }
