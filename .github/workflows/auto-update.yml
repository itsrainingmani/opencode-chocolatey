name: Auto Update opencode Package

on:
  schedule:
    # Every 2 hours (more reasonable than 15 min)
    - cron: '0 */1 * * *'
  workflow_dispatch:
    inputs:
      force:
        description: 'Force update even if version matches'
        required: false
        type: boolean
        default: false

concurrency:
  group: opencode-update
  cancel-in-progress: true

defaults:
  run:
    shell: powershell

jobs:
  # Job 1: Simple check for updates
  check-for-updates:
    name: Check for new version
    runs-on: windows-latest
    timeout-minutes: 5
    outputs:
      needs_update: ${{ steps.version-check.outputs.needs_update }}
      current_version: ${{ steps.version-check.outputs.current_version }}
      latest_version: ${{ steps.version-check.outputs.latest_version }}
      download_url: ${{ steps.version-check.outputs.download_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check versions and availability
        id: version-check
        run: |
          # Get current version from nuspec
          [xml]$nuspec = Get-Content 'opencode.nuspec'
          $currentVersion = $nuspec.package.metadata.version
          Write-Host "Current version: $currentVersion"

          # Get latest release from GitHub
          try {
            $headers = @{ 
              'User-Agent' = 'Chocolatey-Updater'
              'Accept' = 'application/vnd.github.v3+json'
            }
            $release = Invoke-RestMethod -Uri 'https://api.github.com/repos/sst/opencode/releases/latest' -Headers $headers
            $latestVersion = $release.tag_name.TrimStart('v')
            Write-Host "Latest version: $latestVersion"
            
            # Check if Windows x64 asset exists
            $asset = $release.assets | Where-Object { $_.name -eq 'opencode-windows-x64.zip' }
            if (-not $asset) {
              Write-Host "::warning::Windows x64 asset not available for version $latestVersion"
              Add-Content -Path $env:GITHUB_OUTPUT -Value "needs_update=false"
              exit 0
            }
            
            # Determine if update is needed
            $forceUpdate = '${{ inputs.force }}' -eq 'true'
            $needsUpdate = ($currentVersion -ne $latestVersion) -or $forceUpdate
            
            # Write outputs using Add-Content for reliability
            Add-Content -Path $env:GITHUB_OUTPUT -Value "needs_update=$(if ($needsUpdate) { 'true' } else { 'false' })"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "current_version=$currentVersion"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "latest_version=$latestVersion"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "download_url=$($asset.browser_download_url)"
            
            if ($needsUpdate) {
              Write-Host "::notice::Update needed: $currentVersion -> $latestVersion"
            } else {
              Write-Host "::notice::Already up to date: $currentVersion"
            }
          }
          catch {
            Write-Host "::error::Failed to check for updates: $_"
            exit 1
          }

  # Job 2: Update package (only runs if update needed)
  update-package:
    name: Update and test package
    runs-on: windows-latest
    timeout-minutes: 20
    needs: check-for-updates
    if: needs.check-for-updates.outputs.needs_update == 'true'
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and calculate checksum
        id: download
        run: |
          $downloadUrl = "${{ needs.check-for-updates.outputs.download_url }}"
          $version = "${{ needs.check-for-updates.outputs.latest_version }}"

          Write-Host "Downloading $downloadUrl"
          $tempFile = Join-Path $env:TEMP "opencode-$version.zip"

          # Download with retry logic
          $maxRetries = 3
          $success = $false

          for ($i = 1; $i -le $maxRetries; $i++) {
            try {
              Invoke-WebRequest -Uri $downloadUrl -OutFile $tempFile -UserAgent 'Chocolatey-Updater'
              $success = $true
              break
            }
            catch {
              Write-Host "::warning::Download attempt $i failed: $_"
              if ($i -eq $maxRetries) { throw }
              Start-Sleep -Seconds 5
            }
          }

          if (-not $success -or -not (Test-Path $tempFile)) {
            throw "Failed to download after $maxRetries attempts"
          }

          # Calculate checksum
          $checksum = Get-FileHash -Path $tempFile -Algorithm SHA256 | Select-Object -ExpandProperty Hash
          Write-Host "SHA256: $checksum"

          "checksum=$checksum" >> $env:GITHUB_OUTPUT

          # Cleanup
          Remove-Item $tempFile -Force

      - name: Update package files
        run: |
          $version = "${{ needs.check-for-updates.outputs.latest_version }}"
          $checksum = "${{ steps.download.outputs.checksum }}"

          # Update nuspec
          [xml]$nuspec = Get-Content 'opencode.nuspec'
          $nuspec.package.metadata.version = $version
          $nuspec.package.metadata.releaseNotes = "https://github.com/sst/opencode/releases/tag/v$version"
          $nuspec.Save('opencode.nuspec')
          Write-Host "Updated nuspec to version $version"

          # Update install script checksum
          $installScript = Get-Content 'tools\chocolateyinstall.ps1' -Raw
          $installScript = $installScript -replace "checksum64\s*=\s*'([A-F0-9]{64}|PLACEHOLDER_CHECKSUM)'", "checksum64     = '$checksum'"
          Set-Content -Path 'tools\chocolateyinstall.ps1' -Value $installScript -NoNewline
          Write-Host "Updated checksum in install script"

      - name: Test package
        run: |
          # Build package
          choco pack --yes
          if ($LASTEXITCODE -ne 0) {
            throw "Package build failed"
          }

          # Test installation
          $version = "${{ needs.check-for-updates.outputs.latest_version }}"
          choco install opencode -dy --source="'.,https://community.chocolatey.org/api/v2/'"
          if ($LASTEXITCODE -ne 0) {
            throw "Package installation failed"
          }

          # Verify it works
          $installedVersion = & opencode --version 2>&1
          Write-Host "Installed version: $installedVersion"

          if (-not ($installedVersion -match $version)) {
            Write-Host "::warning::Version mismatch - expected $version, got $installedVersion"
          }

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update opencode to v${{ needs.check-for-updates.outputs.latest_version }}'
          title: 'Update opencode to v${{ needs.check-for-updates.outputs.latest_version }}'
          body: |
            ## üöÄ Auto-update: opencode v${{ needs.check-for-updates.outputs.latest_version }}

            **Previous version:** v${{ needs.check-for-updates.outputs.current_version }}  
            **New version:** v${{ needs.check-for-updates.outputs.latest_version }}

            ### Changes Made
            - ‚úÖ Updated version in `opencode.nuspec`
            - ‚úÖ Updated SHA256 checksum in `tools/chocolateyinstall.ps1`
            - ‚úÖ Updated release notes URL

            ### Validation
            - ‚úÖ Package builds successfully
            - ‚úÖ Local installation test passed
            - ‚úÖ Binary version verified

            **Release notes:** https://github.com/sst/opencode/releases/tag/v${{ needs.check-for-updates.outputs.latest_version }}

            ---
            *This PR was created automatically by the update workflow.*
          branch: update-v${{ needs.check-for-updates.outputs.latest_version }}
          delete-branch: true
          labels: |
            automated
            update
            dependencies

  # Job 3: Status summary (always runs)
  summary:
    name: Update summary
    runs-on: windows-latest
    needs: [check-for-updates, update-package]
    if: always()

    steps:
      - name: Report results
        run: |
          $needsUpdate = "${{ needs.check-for-updates.outputs.needs_update }}"
          $updateResult = "${{ needs.update-package.result }}"

          if ($needsUpdate -eq 'false') {
            Write-Host "::notice::No update needed - opencode is already at the latest version"
          } elseif ($updateResult -eq 'success') {
            Write-Host "::notice::‚úÖ Successfully created PR for opencode v${{ needs.check-for-updates.outputs.latest_version }}"
          } elseif ($updateResult -eq 'failure') {
            Write-Host "::error::‚ùå Update process failed"
            exit 1
          } elseif ($updateResult -eq 'cancelled') {
            Write-Host "::warning::‚ö†Ô∏è Update process was cancelled"
          } else {
            Write-Host "::notice::Update check completed"
          }
